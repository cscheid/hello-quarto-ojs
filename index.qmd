---
title: "Quarto Observable"
format: html
---

When using HTML format output, Quarto allows you to create interactive
pages. We use [ObservableHQ](https://observablehq.com)'s variant of
Javascript, which includes "reactive" variables. This means that you
can write and run Javascript inside Quarto cells, with additional
support for features which make building dashboards particularly easy.

Here's a very minimal example:

```{observable}
//| output: false
function clicked()
{
  alert("You pressed the button!");
}
```

Then, we create a button:

```{observable}
button = {
  return htl.html`<button onclick=${clicked}>Click me!</button>`;
}
```

## Neat, but how does it work?

We are using two Observable features here. The first feature is that
we can define HTML elements through blocks of code with the
`name={...}` syntax. Assuming you're familiar with Javascript, it
behaves almost as if you had written

```js
function button() {
  ...
}
addToDocument(button());
```

where we are imagining an `addToDocument` function that would append the
result of that function call to the document.

The second feature we're using is the `htl.html` "template". Observable
allows you to quickly build elements by typing the content of an HTML
element inside backticks, preceeded by the `htl.html` template
specifier[^clicked-global].

This is only the beginning of what's possible with Observable and
Quarto: see the "Features" section of the sidebar for a comprehensive
introduction. In particular, Quarto Observable is "reactive" in the
same way that Observable itself is.

[^clicked-global]: In this example, you might be tempted to write
    `` htl.html`<button onclick=clicked>...</button>` ``.
    
    Unfortunately, that won't work, because function definitions in
    observable are not injected into the global Javascript namespace, 
    and the string "clicked" is not associated with the function we defined.
    Instead, we wrap `clicked` around `${}` so that its _value_ is used, and name resolution 
    happens correctly.
    
    In addition, if you're an ObservableHQ veteran and are wondering about 
    the difference between `htl.html` and `html`, [check this out](https://github.com/observablehq/htl).
