---
title: "OJS Modules"
---

If you want to use the many existing observable modules
that are present in the ecosystem, you can do so in the same way
as you would in ObservableHQ. This way, Quarto users can contribute
to the ObservableHQ ecosystem and vice-versa.

This example comes from Sean Lopp's excellent ["Observable for R
Users" notebook](https://observablehq.com/@slopp/observable-for-r-users).

You can use their `require` syntax:

```{ojs}
//| output: false
vg = require('vega-lite');
penguins = FileAttachment("penguins.csv").csv();
```

```{ojs}
vl
  .markPoint()                           // the first two lines are akin to ggplot(data = penguins) + geom_point
  .data(penguins)
  .encode(                               // encode is like aes
    vl.x().fieldQ('body_mass_g')         // aes(x = body_mass_g)
          .scale({domain: [2000, 6500]}) // modify scale attributes, similar to scale_x_axis
          .axis({title: "Mass (g)"}),
    vl.y().fieldQ('bill_length_mm')     
          .scale({domain: [30, 60]}),
    vl.color().fieldN('species'),
    vl.tooltip(['species', 'sex', 'year', 'island'])  // tooltips for free!
).render()
```

You can also import directly from a live ObservableHQ notebook. Let's
try a simple example using sliders:

```{ojs}
//| output: false
import {slider} from "@jashkenas/inputs"
```

Here, we're also using [Quarto's custom layouts](https://quarto.org/docs/authoring/figures-and-layout.html#complex-layouts),
which help when building dashboards.

```{ojs}
//| layout: "[[30, -5, 30, -5, 30], [100]]"
viewof hue = slider({min: 0, max: 360, title: "Hue"})
viewof chroma = slider({min: 0, max: 100, title: "Chroma"})
viewof luminance = slider({min: 0, max: 100, title: "Luminance"})
color = {
  const fill = d3.hcl(hue, chroma, luminance);
  const r = htl.svg`<rect width="${width}" height="30" fill="${fill}"/>`;
  const s = DOM.svg(width, 30);
  s.appendChild(r);
  return s;
}
```
