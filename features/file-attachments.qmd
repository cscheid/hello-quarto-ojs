---
title: "Files and File Attachments"
---

OJS provides you with a ton of flexibility and options for
interactivity on the browser side.  But what if you want to interact
with files in the file system? This is very common when you have some
R or Python code that generates some data to be visualized.
Quarto OJS provides `FileAttachment` objects, or simply "file attachments".

File attachments work similarly to how they do in Observable. You include them as
a resource in your quarto document or project, and then access them
with `FileAttachment`. Here we're using Allison Horst's excellent
[palmer penguins dataset](penguins.csv)
([source](https://allisonhorst.github.io/palmerpenguins/)):

```{r}
# This R code is run by Quarto, just like it would in (say) Rmarkdown.
library(palmerpenguins)
write.csv(penguins, "penguins.csv")
```

We now can reference this file directly in [file attachments](https://observablehq.com/@observablehq/file-attachments).

```{ojs}
//| output: false
data = FileAttachment("penguins.csv").csv()
avg = {
  const vs = data.map(s => s.bill_length_mm).filter(s => s !== "NA").map(Number);
  let n = 0;
  vs.forEach(v => n += v);
  return n / vs.length;
}
```

The average bill length of penguins in the dataset is ${fmt(avg)}mm.

### Which files are included?

When you render a Quarto document, Quarto inspects OJS chunks and
tries to figure out which files the document intends to use as
attachment to automatically include them in the build (typically in
the `_site` directory). It does so by inspecting OJS source code,
looking for `FileAttachment(...)` calls with string literals as parameters. 

This works well in simple cases, but more complex code might have
arbitrary logic to decide on which filename to load. In that case, it
will be necessary to explicitly add those files as resources in the
YAML frontmatter (either for the project itself or some of its
pages). Here's an example:

```
title: "This is the title of some page with attachments"
resources:
  - penguins.csv
  - data/*.csv
```

(FIXME: Apparently [file attachments only work with string literals anyway!](https://observablehq.com/@observablehq/file-attachments))

### How are paths resolved?

Quarto is careful to convert all local URL paths to "root-relative"
paths, so that the entire Quarto project you build works, regardless
of how deep in a web server path hierarchy you serve its content from.
In other words, if your markdown includes an image URL
`/imgs/asset-1.jpg`, Quarto will convert that URL to a relative
one. In Quarto OJS, FileAttachments work the same way. For example,
here we check that `penguins.csv` and `/features/penguins.csv` indeed
seem to be the same file, by looking at random rows of the file and
verifying that they have the same bill lengths:

```{ojs}
data2 = FileAttachment("/features/penguins.csv").csv()
{
    let randomRow = (now & 65535) % data.length;
    return data2[randomRow].bill_length_mm === data[randomRow].bill_length_mm;
}
```


```{ojs}
//| echo: false
//| output: false
function fmt(n)
{
   let s = String(~~n);
   return s.substr(s.length - 2);
}
```
