---
title: "File Attachments"
---

File attachments work similarly to how they do in Observable. You include them as
a resource in your quarto document or project, and then access them
with `FileAttachment`. Here we're using Allison Horst's excellent
[palmer penguins dataset](penguins.csv)
([source](https://allisonhorst.github.io/palmerpenguins/)).

Quarto tries to figure out which files you want to use as attachments
by inspecting the source code for `FileAttachment(...)` literals. If
you have arbitrary logic to decide on the filename to load, you will
need to explicitly add those files as resources in your project's
YAML frontmatter (or in some of its pages).

```{ojs}
data = FileAttachment("penguins.csv").csv()
```

```{ojs}
avg = {
  let vs = data.map(s => s.bill_length_mm).filter(s => s !== "NA").map(Number);
  let n = 0;
  vs.forEach(v => n += v);
  return n / vs.length;
}
```

### Root-relative FileAttachments

Quarto is careful to convert all local URL paths to "root-relative"
paths, so that the entire Quarto project you build works, regardless
of how deep in a web server path hierarchy you serve its content from.
In other words, if your markdown includes an image URL
`/imgs/asset-1.jpg`, Quarto will convert that URL to a relative
one. In Quarto OJS, FileAttachments work the same way. For example,
here we check that `penguins.csv` and `/features/penguins.csv` indeed
seem to be the same file:

```{ojs}
data2 = FileAttachment("/features/penguins.csv").csv()
{
    let randomRow = (now & 65535) % data.length;
    return data2[randomRow].bill_length_mm === data[randomRow].bill_length_mm;
}
```
