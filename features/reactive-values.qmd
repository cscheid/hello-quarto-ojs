---
title: "Reactive Values"
---

The fundamental difference between "plain Javascript" and Observable's
version of Javascript (here, "OJS") is its native support for
_reactivity_.

Imagine you wanted to create a simple visual time display shaped like
an analog clock (or, looking ahead, imagine a JS dashboard that
periodically updates itself). Whatever you end up showing ultimately will
depend on the current time. So you start writing functions which compute
the present time:

```{ojs}
//| output: false
currentTime = function() {
  return Date.now();
}
currentHours = function() {
  return (Date.now() / (3600 * 1000)) % 12;
}
currentMinutes = function() {
  return (Date.now() / (60 * 1000)) % 60;
}
currentSeconds = function() {
  return (Date.now() / 1000) % 60;
}
```

But `Date.now()` is always changing, and so your plain Javascript code needs
infrastructure to update the display constantly, otherwise that value
is only computed once per call:

```{ojs}
staticTime = { 
  return { hours: currentHours(), minutes: currentMinutes(), seconds: currentSeconds() };
}
htl.html`<tt>${fmt(currentHours())}:${fmt(currentMinutes())}:${fmt(currentSeconds())}</tt>`
```

"This is fine," you say. After all, we have Javascript:

```{ojs}
ttEl = {
  return document.createElement("tt");
}
```
```{ojs}
//| output: false
function updateEl() {
  ttEl.innerText = `${fmt(currentHours())}:${fmt(currentMinutes())}:${fmt(currentSeconds())}`;
  window.requestAnimationFrame(updateEl);
}
updateEl()
```

But what if your data only updates once a minute? What if you _don't
know_ how often your data updates?  Eventually code like this becomes
a delicate dance of signals and event handlers.  Things can get
quickly out of hand.

## Enter reactive values

OJS, on the other hand, lets you define "reactive" values: special values that can
change, _and notify downstream code about the change_. So, we can write this instead:

```{ojs}
// "now" is a predefined reactive value that returns the current
// value of Date.now()
reactiveTime = {
  const hours = (now / (3600 * 1000)) % 12;
  const minutes = (now / (60 * 1000)) % 60;
  const seconds = (now / 1000) % 60;
  
  return { hours, minutes, seconds };
}
```

Now the values automatically update themselves. In OJS, you can
write code that uses these as if they were regular Javascript
values. OJS notices you're using reactive values, and turns
your definition into a reactive value as well:

```{ojs}
timeString = htl.html`<tt>${fmt(reactiveTime.hours)}:${fmt(reactiveTime.minutes)}:${fmt(reactiveTime.seconds)}</tt>`
```

But we wanted an analog clock. So let's make an analog clock, using
SVG.

```{ojs}
//| label: fig-1
//| fig.cap: An SVG clock built with reactive values.[^1]
clock = {
   const { hours, minutes, seconds } = reactiveTime;
   const result = svg`<svg width=200 height=200></svg>`;
   const hourAngle = toClockAngle(hours / 12);
   const minuteAngle = toClockAngle(minutes / 60);
   const secondAngle = toClockAngle(seconds / 60);
   const main = svg`<g transform="translate(100, 100) scale(1, -1)"></g>`;
   
   result.appendChild(main);
   main.appendChild(svg`<circle r=95 fill="#eee"></circle>`);
   main.appendChild(clockHand(secondAngle, "red", 1));
   main.appendChild(clockHand(minuteAngle, "black", 1));
   main.appendChild(clockHand(hourAngle, "black", 3));
   return result;
}
```

OJS makes sure your SVG definition is also reactive, since it
also uses reactive values.

## Extras

```{ojs}
//| output: false
function fmt(n)
{
   const s = ("00" + String(~~n));
   return s.substr(s.length - 2);
}
function toClockAngle(v)
{
  // some math is needed here because unlike polar coordinates, 
  // clock hands run clockwise and start at the "north pole"
  return -(-Math.PI / 2 + Math.PI * 2 * v) * (180 / Math.PI);
}
function clockHand(angle, color, width)
{
  return svg`<line transform="rotate(${angle})" x1=0 y1=0 x2=90 y2=0 stroke=${color} stroke-width=${width}></line>`
}
```

[^1]: Note that `now` doesn't take timezones into account, so you're likely to see your clock a few hours off.
