---
title: "`ojs_define`: Sending values to OJS"
---

Often, Quarto pages will have a mix of R, Python and OJS chunks. At the
time the Quarto project renders, the R and Python code might query
into a database, do some data cleaning or some statistical
modeling. It's natural to want that data to be accessible.

Quarto offers a unified mechanism in R and Python for doing so:
`ojs_define`.

## Calling `ojs_define`

### Python

Here's a Python example that uses the `subprocess`
command to get information about some files in the filesystem:

```{r}
#| echo: false
#| output: false

# FIXME: This will be in a library somewhere.

library(reticulate)

setHook("reticulate.onPyInit",
  function() {
    main <- import_main();
    main$ojs_define <- function(...) {
      quos <- rlang::enquos(...)
      vars <- rlang::list2(...)
      nm <- names(vars)
      if (is.null(nm)) {
        nm <- rep_len("", length(vars))
      }
      contents <- jsonlite::toJSON(list(contents = I(mapply(
        function(q, nm, val) {
          # Infer name, if possible
          if (nm == "") {
            tryCatch({
              nm <- rlang::as_name(q)
            }, error = function(e) {
              code <- paste(collapse = "\n", deparse(rlang::f_rhs(q)))
              stop("ojs_define() could not create a name for the argument: ", code)
            })
          }
          list(name=nm, value=val)
        }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES=FALSE))),
        dataframe = "columns", null = "null", na = "null", auto_unbox = TRUE);
      invisible(knitr:::knit_meta_add(list(
        structure(
          class="ojs-define",
          c("<script type=\"ojs-define\">",
            contents,
            "</script>")))));
      NULL
    };
});
```

```{python}
import subprocess
out = subprocess.run(["ls", "/usr/local"], stdout=subprocess.PIPE).stdout.decode('ascii')
py_file_list = out.split()
```

What if we want to make that information available for the front-end,
so that we could create (say) an interactive selection widget? In
Quarto, you simply use the call to `ojs_define`:

```{python}
ojs_define(py_file_list = py_file_list)
```

This makes sure there will be a variable `py_file_list` available for OJS modules.

### R

In R, the situation is very similar. The only difference is that R's
version of `ojs_define` is mildly smarter, and can sniff variable names from the declaration:

```{r}
r_file_list <- system2(c("ls", "/usr/local"), stdout=TRUE)
ojs_define(r_file_list) 
```

## Using the values

We now can access those values as if they had been defined directly in OJS:

```{ojs}
py_file_list
r_file_list
```

Of course, this means we can create a dropdown list as well:

```{ojs}
viewof fileName = Inputs.select(py_file_list, { label: "Choose file" })
```
